/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_tiledb(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_tiledb(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_tiledb(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <list>
#include <algorithm>
#include <stdexcept>


#include <set>
#include <algorithm>
#include <stdexcept>



#include "tiledb_cxx_array.h"

#include "tiledb_cxx_array_schema.h"

#include "tiledb_cxx_attribute.h"

#include "tiledb_cxx_config.h"

#include "tiledb_cxx_context.h"

#include "tiledb_cxx_core_interface.h"

#include "tiledb_cxx_dimension.h"

#include "tiledb_cxx_domain.h"

#include "tiledb_cxx_exception.h"

#include "tiledb_cxx_filter.h"

#include "tiledb_cxx_filter_list.h"

#include "tiledb_cxx_group.h"

#include "tiledb_cxx_object.h"

#include "tiledb_cxx_object_iter.h"

#include "tiledb_cxx_query.h"

#include "tiledb_cxx_stats.h"

#include "tiledb_cxx_utils.h"

#include "tiledb_cxx_version.h"

#include "tiledb_cxx_vfs.h"

#include "tiledb_enum.h"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_query_type_t arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_query_type_t)jarg3; 
  result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_query_type_t arg3 ;
  tiledb_encryption_type_t arg4 ;
  std::string *arg5 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_query_type_t)jarg3; 
  arg4 = (tiledb_encryption_type_t)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_2(void * jarg1, char * jarg2, int jarg3, unsigned long long jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_query_type_t arg3 ;
  uint64_t arg4 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_query_type_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_3(void * jarg1, char * jarg2, int jarg3, int jarg4, char * jarg5, unsigned long long jarg6) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_query_type_t arg3 ;
  tiledb_encryption_type_t arg4 ;
  std::string *arg5 = 0 ;
  uint64_t arg6 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_query_type_t)jarg3; 
  arg4 = (tiledb_encryption_type_t)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (uint64_t)jarg6; 
  result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5,arg6);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Array *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = (tiledb_array_t *)jarg2; 
  result = (tiledb::Array *)new tiledb::Array((std::shared_ptr< tiledb::Context > const &)*arg1,arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Array__SWIG_5(void * jarg1) {
  void * jresult ;
  tiledb::Array *arg1 = 0 ;
  tiledb::Array *result = 0 ;
  
  
  arg1 = (tiledb::Array *)(((std::shared_ptr< const tiledb::Array > *)jarg1) ? ((std::shared_ptr< const tiledb::Array > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Array const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Array *)new tiledb::Array((tiledb::Array const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Array >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Array(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Array_is_open(void * jarg1) {
  unsigned int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((tiledb::Array const *)arg1)->is_open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Array_uri(void * jarg1) {
  char * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Array const *)arg1)->uri();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Array_schema(void * jarg1) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  tiledb::ArraySchema result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Array const *)arg1)->schema();
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(new tiledb::ArraySchema((tiledb::ArraySchema &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Array_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_array_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Array const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_array_t >((const std::shared_ptr< tiledb_array_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_open__SWIG_0(void * jarg1, int jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb_query_type_t arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_query_type_t)jarg2; 
  (arg1)->open(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_open__SWIG_1(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb_query_type_t arg2 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_query_type_t)jarg2; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  (arg1)->open(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_open__SWIG_2(void * jarg1, int jarg2, unsigned long long jarg3) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb_query_type_t arg2 ;
  uint64_t arg3 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_query_type_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  (arg1)->open(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_open__SWIG_3(void * jarg1, int jarg2, int jarg3, char * jarg4, unsigned long long jarg5) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  tiledb_query_type_t arg2 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_query_type_t)jarg2; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint64_t)jarg5; 
  (arg1)->open(arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_reopen(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->reopen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_reopen_at(void * jarg1, unsigned long long jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  (arg1)->reopen_at(arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Array_timestamp(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t)((tiledb::Array const *)arg1)->timestamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_close(void * jarg1) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  arg4 = jarg4; 
  arg5 = (uint32_t)jarg5; 
  tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_vacuum__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  tiledb::Array::vacuum((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_vacuum__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  tiledb::Array::vacuum((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate__SWIG_3(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  tiledb::Config *arg5 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg5 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  
  smartarg5 = (std::shared_ptr<  tiledb::Config > *)jarg5;
  arg5 = (tiledb::Config *)(smartarg5 ? smartarg5->get() : 0); 
  tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate__SWIG_4(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  tiledb::Array::consolidate((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_create__SWIG_0(char * jarg1, void * jarg2) {
  std::string *arg1 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > tempnull2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::ArraySchema > *)jarg2 : &tempnull2; 
  tiledb::Array::create((std::string const &)*arg1,(std::shared_ptr< tiledb::ArraySchema > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Array_load_schema(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::ArraySchema > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = tiledb::Array::load_schema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
  jresult = result ? new std::shared_ptr< tiledb::ArraySchema >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_create__SWIG_1(char * jarg1, void * jarg2, int jarg3, char * jarg4) {
  std::string *arg1 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > tempnull2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::ArraySchema > *)jarg2 : &tempnull2; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  tiledb::Array::create((std::string const &)*arg1,(std::shared_ptr< tiledb::ArraySchema > const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Array_encryption_type(void * jarg1, char * jarg2) {
  int jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb_encryption_type_t result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb_encryption_type_t)tiledb::Array::encryption_type((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Array_non_empty_domain_var__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  SwigValueWrapper< std::pair< std::string,std::string > > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->non_empty_domain_var(arg2);
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Array_non_empty_domain_var__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  SwigValueWrapper< std::pair< std::string,std::string > > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->non_empty_domain_var((std::string const &)*arg2);
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Array_query_type(void * jarg1) {
  int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  tiledb_query_type_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_query_type_t)((tiledb::Array const *)arg1)->query_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate_metadata__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Config *arg3 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg3 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  smartarg3 = (std::shared_ptr<  tiledb::Config > *)jarg3;
  arg3 = (tiledb::Config *)(smartarg3 ? smartarg3->get() : 0); 
  tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate_metadata__SWIG_1(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate_metadata__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  arg4 = jarg4; 
  arg5 = (uint32_t)jarg5; 
  tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate_metadata__SWIG_3(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  tiledb::Config *arg5 = (tiledb::Config *) (tiledb::Config *)0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Config > *smartarg5 = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  
  smartarg5 = (std::shared_ptr<  tiledb::Config > *)jarg5;
  arg5 = (tiledb::Config *)(smartarg5 ? smartarg5->get() : 0); 
  tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_consolidate_metadata__SWIG_4(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  tiledb::Array::consolidate_metadata((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Array_delete_metadata(void * jarg1, char * jarg2) {
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->delete_metadata((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Array_has_metadata(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::string *arg2 = 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  std::shared_ptr< tiledb::Array > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_datatype_t *)jarg3; 
  result = (bool)(arg1)->has_metadata((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Array_metadata_num(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Array *arg1 = (tiledb::Array *) 0 ;
  std::shared_ptr< tiledb::Array const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Array > *)jarg1;
  arg1 = (tiledb::Array *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t)((tiledb::Array const *)arg1)->metadata_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ArraySchema__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb_array_type_t arg2 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = (tiledb_array_type_t)jarg2; 
  result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ArraySchema__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ArraySchema__SWIG_2(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_encryption_type_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ArraySchema *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_encryption_type_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (tiledb::ArraySchema *)new tiledb::ArraySchema((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ArraySchema__SWIG_3() {
  void * jresult ;
  tiledb::ArraySchema *result = 0 ;
  
  result = (tiledb::ArraySchema *)new tiledb::ArraySchema();
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ArraySchema__SWIG_4(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  arg1 = (tiledb::ArraySchema *)(((std::shared_ptr< const tiledb::ArraySchema > *)jarg1) ? ((std::shared_ptr< const tiledb::ArraySchema > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::ArraySchema const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *)new tiledb::ArraySchema((tiledb::ArraySchema const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_ArraySchema(void * jarg1) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ArraySchema_dump__SWIG_0(void * jarg1, void * jarg2) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (FILE *)jarg2; 
  ((tiledb::ArraySchema const *)arg1)->dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ArraySchema_dump__SWIG_1(void * jarg1) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  ((tiledb::ArraySchema const *)arg1)->dump();
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_ArraySchema_array_type(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb_array_type_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_array_type_t)((tiledb::ArraySchema const *)arg1)->array_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_ArraySchema_capacity(void * jarg1) {
  unsigned long long jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t)((tiledb::ArraySchema const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_capacity(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  result = (tiledb::ArraySchema *) &(arg1)->set_capacity(arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_ArraySchema_allows_dups(void * jarg1) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((tiledb::ArraySchema const *)arg1)->allows_dups();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_allows_dups(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  bool arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  result = (tiledb::ArraySchema *) &(arg1)->set_allows_dups(arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_ArraySchema_tile_order(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb_layout_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_layout_t)((tiledb::ArraySchema const *)arg1)->tile_order();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_tile_order(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb_layout_t arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_layout_t)jarg2; 
  result = (tiledb::ArraySchema *) &(arg1)->set_tile_order(arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_order(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::array< tiledb_layout_t,2 > *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::array< tiledb_layout_t,2 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< tiledb_layout_t,2 > const & type is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *) &(arg1)->set_order((std::array< tiledb_layout_t,2 > const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_ArraySchema_cell_order(void * jarg1) {
  int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb_layout_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_layout_t)((tiledb::ArraySchema const *)arg1)->cell_order();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_cell_order(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb_layout_t arg2 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_layout_t)jarg2; 
  result = (tiledb::ArraySchema *) &(arg1)->set_cell_order(arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_coords_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->coords_filter_list();
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_coords_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *) &(arg1)->set_coords_filter_list((tiledb::FilterList const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_offsets_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->offsets_filter_list();
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_offsets_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *) &(arg1)->set_offsets_filter_list((tiledb::FilterList const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_domain(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Domain > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->domain();
  jresult = new std::shared_ptr<  tiledb::Domain >(new tiledb::Domain((tiledb::Domain &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_set_domain(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::Domain *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Domain *)(((std::shared_ptr< const tiledb::Domain > *)jarg2) ? ((std::shared_ptr< const tiledb::Domain > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Domain const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *) &(arg1)->set_domain((tiledb::Domain const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_add_attribute__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  tiledb::Attribute *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  tiledb::ArraySchema *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Attribute *)(((std::shared_ptr< const tiledb::Attribute > *)jarg2) ? ((std::shared_ptr< const tiledb::Attribute > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Attribute const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::ArraySchema *) &(arg1)->add_attribute((tiledb::Attribute const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::ArraySchema >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_ptr(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_array_schema_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_array_schema_t >((const std::shared_ptr< tiledb_array_schema_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ArraySchema_check(void * jarg1) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  ((tiledb::ArraySchema const *)arg1)->check();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_attributes(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< std::unordered_map< std::string,tiledb::Attribute > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->attributes();
  jresult = new std::unordered_map< std::string,tiledb::Attribute >((const std::unordered_map< std::string,tiledb::Attribute > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_attribute__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::ArraySchema const *)arg1)->attribute((std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_ArraySchema_attribute_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((tiledb::ArraySchema const *)arg1)->attribute_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_attribute__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((tiledb::ArraySchema const *)arg1)->attribute(arg2);
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_ArraySchema_has_attribute(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::ArraySchema const *)arg1)->has_attribute((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_ArraySchema_to_info_str(void * jarg1) {
  char * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->to_info_str();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_ArraySchema_to_str__SWIG_0(int jarg1) {
  char * jresult ;
  tiledb_array_type_t arg1 ;
  std::string result;
  
  arg1 = (tiledb_array_type_t)jarg1; 
  result = tiledb::ArraySchema::to_str(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_ArraySchema_to_str__SWIG_1(int jarg1) {
  char * jresult ;
  tiledb_layout_t arg1 ;
  std::string result;
  
  arg1 = (tiledb_layout_t)jarg1; 
  result = tiledb::ArraySchema::to_str(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_attribute_names(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->attribute_names();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_dimension_names(void * jarg1) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ArraySchema const *)arg1)->dimension_names();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_ArraySchema_has_dimension(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::ArraySchema const *)arg1)->has_dimension((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_dimension__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((tiledb::ArraySchema const *)arg1)->dimension(arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ArraySchema_dimension__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::ArraySchema const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::ArraySchema const *)arg1)->dimension((std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ArraySchema_add_int_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->add_int_dimension((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ArraySchema_add_attribute__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::string *arg2 = 0 ;
  tiledb_datatype_t arg3 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_datatype_t)jarg3; 
  (arg1)->add_attribute((std::string const &)*arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_ArraySchema_to_json_str(void * jarg1) {
  char * jresult ;
  tiledb::ArraySchema *arg1 = (tiledb::ArraySchema *) 0 ;
  std::shared_ptr< tiledb::ArraySchema > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ArraySchema > *)jarg1;
  arg1 = (tiledb::ArraySchema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->to_json_str();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Attribute__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_datatype_t arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Attribute *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_datatype_t)jarg3; 
  result = (tiledb::Attribute *)new tiledb::Attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Attribute__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_datatype_t arg3 ;
  tiledb::FilterList *arg4 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Attribute *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_datatype_t)jarg3; 
  
  arg4 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg4) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Attribute *)new tiledb::Attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(tiledb::FilterList const &)*arg4);
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Attribute__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Attribute *arg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  arg1 = (tiledb::Attribute *)(((std::shared_ptr< const tiledb::Attribute > *)jarg1) ? ((std::shared_ptr< const tiledb::Attribute > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Attribute const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Attribute *)new tiledb::Attribute((tiledb::Attribute const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Attribute_name(void * jarg1) {
  char * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Attribute const *)arg1)->name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Attribute_type(void * jarg1) {
  int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  tiledb_datatype_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_datatype_t)((tiledb::Attribute const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Attribute_cell_size(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t)((tiledb::Attribute const *)arg1)->cell_size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Attribute_cell_val_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((tiledb::Attribute const *)arg1)->cell_val_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Attribute_set_cell_val_num(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (tiledb::Attribute *) &(arg1)->set_cell_val_num(arg2);
  jresult = new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Attribute_variable_sized(void * jarg1) {
  unsigned int jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((tiledb::Attribute const *)arg1)->variable_sized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Attribute_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Attribute const *)arg1)->filter_list();
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Attribute_set_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  tiledb::Attribute *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Attribute *) &(arg1)->set_filter_list((tiledb::FilterList const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Attribute >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Attribute_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_attribute_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Attribute const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_attribute_t >((const std::shared_ptr< tiledb_attribute_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Attribute_dump__SWIG_0(void * jarg1, void * jarg2) {
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (FILE *)jarg2; 
  ((tiledb::Attribute const *)arg1)->dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Attribute_dump__SWIG_1(void * jarg1) {
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  ((tiledb::Attribute const *)arg1)->dump();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Attribute_is_valid_intdatatype(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)tiledb::Attribute::is_valid_intdatatype(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Attribute_create_attribute(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb_datatype_t arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Attribute > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (tiledb_datatype_t)jarg3; 
  result = tiledb::Attribute::create_attribute((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = new std::shared_ptr<  tiledb::Attribute >(new tiledb::Attribute((tiledb::Attribute &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Attribute(void * jarg1) {
  tiledb::Attribute *arg1 = (tiledb::Attribute *) 0 ;
  std::shared_ptr< tiledb::Attribute > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Attribute > *)jarg1;
  arg1 = (tiledb::Attribute *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Config__SWIG_0() {
  void * jresult ;
  tiledb::Config *result = 0 ;
  
  result = (tiledb::Config *)new tiledb::Config();
  
  jresult = result ? new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Config__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (tiledb::Config *)new tiledb::Config((std::string const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Config_save_to_file(void * jarg1, char * jarg2) {
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string arg2 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->save_to_file(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Config_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::shared_ptr< tiledb::Config const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_config_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Config const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_config_t >((const std::shared_ptr< tiledb_config_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Config_set(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (tiledb::Config *) &(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Config_get(void * jarg1, char * jarg2) {
  char * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Config const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::Config const *)arg1)->get((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Config_unset(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  tiledb::Config *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb::Config *) &(arg1)->unset((std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Config >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Config(void * jarg1) {
  tiledb::Config *arg1 = (tiledb::Config *) 0 ;
  std::shared_ptr< tiledb::Config > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Config > *)jarg1;
  arg1 = (tiledb::Config *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Context__SWIG_0() {
  void * jresult ;
  tiledb::Context *result = 0 ;
  
  result = (tiledb::Context *)new tiledb::Context();
  
  jresult = result ? new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Context__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::Config *arg1 = 0 ;
  tiledb::Context *result = 0 ;
  
  
  arg1 = (tiledb::Config *)(((std::shared_ptr< const tiledb::Config > *)jarg1) ? ((std::shared_ptr< const tiledb::Config > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Config const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Context *)new tiledb::Context((tiledb::Config const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Context__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb::Context *result = 0 ;
  
  arg1 = (tiledb_ctx_t *)jarg1; 
  result = (tiledb::Context *)new tiledb::Context(arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Context_handle_error(void * jarg1, int jarg2) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  int arg2 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  ((tiledb::Context const *)arg1)->handle_error(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Context_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_ctx_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Context const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_ctx_t >((const std::shared_ptr< tiledb_ctx_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Context_set_error_handler(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::function< void (std::string const &) > *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > *smartarg1 = 0 ;
  tiledb::Context *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::function< void (std::string const &) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< void (std::string const &) > const & type is null", 0);
    return 0;
  } 
  result = (tiledb::Context *) &(arg1)->set_error_handler((std::function< void (std::string const &) > const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Context >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Context_config(void * jarg1) {
  void * jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  tiledb::Config result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Context const *)arg1)->config();
  jresult = new std::shared_ptr<  tiledb::Config >(new tiledb::Config((tiledb::Config &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Context_is_supported_fs(void * jarg1, int jarg2) {
  unsigned int jresult ;
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  tiledb_filesystem_t arg2 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_filesystem_t)jarg2; 
  result = (bool)((tiledb::Context const *)arg1)->is_supported_fs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Context_cancel_tasks(void * jarg1) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  ((tiledb::Context const *)arg1)->cancel_tasks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Context_set_tag(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::Context > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->set_tag((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Context_default_error_handler(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  tiledb::Context::default_error_handler((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Context(void * jarg1) {
  tiledb::Context *arg1 = (tiledb::Context *) 0 ;
  std::shared_ptr< tiledb::Context > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Context > *)jarg1;
  arg1 = (tiledb::Context *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_tiledb_query_submit_async_func__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  arg1 = (tiledb_ctx_t *)jarg1; 
  arg2 = (tiledb_query_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (int)tiledb::impl::tiledb_query_submit_async_func(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_tiledb_query_submit_async_func__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  arg1 = (tiledb_ctx_t *)jarg1; 
  arg2 = (tiledb_query_t *)jarg2; 
  arg3 = jarg3; 
  result = (int)tiledb::impl::tiledb_query_submit_async_func(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_tiledb_type_size(int jarg1) {
  unsigned long jresult ;
  tiledb_datatype_t arg1 ;
  size_t result;
  
  arg1 = (tiledb_datatype_t)jarg1; 
  result = tiledb::impl::type_size(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_to_str(int jarg1) {
  char * jresult ;
  tiledb_datatype_t *arg1 = 0 ;
  tiledb_datatype_t temp1 ;
  std::string result;
  
  temp1 = (tiledb_datatype_t)jarg1; 
  arg1 = &temp1; 
  result = tiledb::impl::to_str((enum tiledb_datatype_t const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Dimension__SWIG_0(void * jarg1) {
  void * jresult ;
  tiledb::Dimension *arg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  arg1 = (tiledb::Dimension *)(((std::shared_ptr< const tiledb::Dimension > *)jarg1) ? ((std::shared_ptr< const tiledb::Dimension > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Dimension const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Dimension *)new tiledb::Dimension((tiledb::Dimension const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Dimension_cell_val_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((tiledb::Dimension const *)arg1)->cell_val_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_set_cell_val_num(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (tiledb::Dimension *) &(arg1)->set_cell_val_num(arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_filter_list(void * jarg1) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  tiledb::FilterList result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Dimension const *)arg1)->filter_list();
  jresult = new std::shared_ptr<  tiledb::FilterList >(new tiledb::FilterList((tiledb::FilterList &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_set_filter_list(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  tiledb::FilterList *arg2 = 0 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  tiledb::Dimension *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg2) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Dimension *) &(arg1)->set_filter_list((tiledb::FilterList const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Dimension_name(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Dimension const *)arg1)->name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Dimension_type(void * jarg1) {
  int jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  tiledb_datatype_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_datatype_t)((tiledb::Dimension const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Dimension_domain_to_str(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Dimension const *)arg1)->domain_to_str();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Dimension_tile_extent_to_str(void * jarg1) {
  char * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Dimension const *)arg1)->tile_extent_to_str();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_dimension_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Dimension const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_dimension_t >((const std::shared_ptr< tiledb_dimension_t > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Dimension_is_valid_intdatatype(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)tiledb::Dimension::is_valid_intdatatype(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_dimension(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = tiledb::Dimension::create_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_int32_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = tiledb::Dimension::create_int32_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_int64_dimension(void * jarg1, char * jarg2, long long jarg3, long long jarg4, long long jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  result = tiledb::Dimension::create_int64_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_uint64_dimension(void * jarg1, char * jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  result = tiledb::Dimension::create_uint64_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_double_dimension(void * jarg1, char * jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = tiledb::Dimension::create_double_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Dimension_create_string_dimension(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = tiledb::Dimension::create_string_dimension((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Dimension(void * jarg1) {
  tiledb::Dimension *arg1 = (tiledb::Dimension *) 0 ;
  std::shared_ptr< tiledb::Dimension > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Dimension > *)jarg1;
  arg1 = (tiledb::Dimension *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Domain__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Domain *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  result = (tiledb::Domain *)new tiledb::Domain((std::shared_ptr< tiledb::Context > const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Domain__SWIG_1(void * jarg1) {
  void * jresult ;
  tiledb::Domain *arg1 = 0 ;
  tiledb::Domain *result = 0 ;
  
  
  arg1 = (tiledb::Domain *)(((std::shared_ptr< const tiledb::Domain > *)jarg1) ? ((std::shared_ptr< const tiledb::Domain > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Domain const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Domain *)new tiledb::Domain((tiledb::Domain const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Domain_cell_num(void * jarg1) {
  unsigned long long jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t)((tiledb::Domain const *)arg1)->cell_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_dump__SWIG_0(void * jarg1, void * jarg2) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (FILE *)jarg2; 
  ((tiledb::Domain const *)arg1)->dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_dump__SWIG_1(void * jarg1) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  ((tiledb::Domain const *)arg1)->dump();
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Domain_type(void * jarg1) {
  int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  tiledb_datatype_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_datatype_t)((tiledb::Domain const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Domain_ndim(void * jarg1) {
  unsigned int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((tiledb::Domain const *)arg1)->ndim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Domain_dimensions(void * jarg1) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< tiledb::Dimension > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Domain const *)arg1)->dimensions();
  jresult = new std::vector< tiledb::Dimension >((const std::vector< tiledb::Dimension > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Domain_dimension__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((tiledb::Domain const *)arg1)->dimension(arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Domain_dimension__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< tiledb::Dimension > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::Domain const *)arg1)->dimension((std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Dimension >(new tiledb::Dimension((tiledb::Dimension &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Domain_add_dimension(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  tiledb::Dimension *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  tiledb::Domain *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Dimension *)(((std::shared_ptr< const tiledb::Dimension > *)jarg2) ? ((std::shared_ptr< const tiledb::Dimension > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Dimension const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Domain *) &(arg1)->add_dimension((tiledb::Dimension const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Domain >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_add_int32_dimension(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->add_int32_dimension((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_add_int64_dimension(void * jarg1, char * jarg2, long long jarg3, long long jarg4, long long jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  (arg1)->add_int64_dimension((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_add_uint64_dimension(void * jarg1, char * jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  (arg1)->add_uint64_dimension((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_add_double_dimension(void * jarg1, char * jarg2, double jarg3, double jarg4, double jarg5) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->add_double_dimension((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Domain_add_string_dimension(void * jarg1, char * jarg2) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->add_string_dimension((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Domain_has_dimension(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::Domain const *)arg1)->has_dimension((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Domain_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_domain_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Domain const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_domain_t >((const std::shared_ptr< tiledb_domain_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Domain(void * jarg1) {
  tiledb::Domain *arg1 = (tiledb::Domain *) 0 ;
  std::shared_ptr< tiledb::Domain > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Domain > *)jarg1;
  arg1 = (tiledb::Domain *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_TileDBError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::TileDBError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (tiledb::TileDBError *)new tiledb::TileDBError((std::string const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::TileDBError >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_TileDBError(void * jarg1) {
  tiledb::TileDBError *arg1 = (tiledb::TileDBError *) 0 ;
  std::shared_ptr< tiledb::TileDBError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::TileDBError > *)jarg1;
  arg1 = (tiledb::TileDBError *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_TypeError(void * jarg1) {
  tiledb::TypeError *arg1 = (tiledb::TypeError *) 0 ;
  std::shared_ptr< tiledb::TypeError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::TypeError > *)jarg1;
  arg1 = (tiledb::TypeError *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_SchemaMismatch(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::SchemaMismatch *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (tiledb::SchemaMismatch *)new tiledb::SchemaMismatch((std::string const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::SchemaMismatch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_SchemaMismatch(void * jarg1) {
  tiledb::SchemaMismatch *arg1 = (tiledb::SchemaMismatch *) 0 ;
  std::shared_ptr< tiledb::SchemaMismatch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::SchemaMismatch > *)jarg1;
  arg1 = (tiledb::SchemaMismatch *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_AttributeError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  tiledb::AttributeError *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (tiledb::AttributeError *)new tiledb::AttributeError((std::string const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::AttributeError >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_AttributeError(void * jarg1) {
  tiledb::AttributeError *arg1 = (tiledb::AttributeError *) 0 ;
  std::shared_ptr< tiledb::AttributeError > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::AttributeError > *)jarg1;
  arg1 = (tiledb::AttributeError *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Filter__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb_filter_type_t arg2 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Filter *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = (tiledb_filter_type_t)jarg2; 
  result = (tiledb::Filter *)new tiledb::Filter((std::shared_ptr< tiledb::Context > const &)*arg1,arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Filter__SWIG_1() {
  void * jresult ;
  tiledb::Filter *result = 0 ;
  
  result = (tiledb::Filter *)new tiledb::Filter();
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Filter__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Filter *arg1 = 0 ;
  tiledb::Filter *result = 0 ;
  
  
  arg1 = (tiledb::Filter *)(((std::shared_ptr< const tiledb::Filter > *)jarg1) ? ((std::shared_ptr< const tiledb::Filter > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Filter const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Filter *)new tiledb::Filter((tiledb::Filter const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Filter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Filter_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Filter *arg1 = (tiledb::Filter *) 0 ;
  std::shared_ptr< tiledb::Filter const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_filter_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Filter > *)jarg1;
  arg1 = (tiledb::Filter *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Filter const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_filter_t >((const std::shared_ptr< tiledb_filter_t > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Filter_filter_type(void * jarg1) {
  int jresult ;
  tiledb::Filter *arg1 = (tiledb::Filter *) 0 ;
  std::shared_ptr< tiledb::Filter const > *smartarg1 = 0 ;
  tiledb_filter_type_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Filter > *)jarg1;
  arg1 = (tiledb::Filter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_filter_type_t)((tiledb::Filter const *)arg1)->filter_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Filter_to_str(int jarg1) {
  char * jresult ;
  tiledb_filter_type_t arg1 ;
  std::string result;
  
  arg1 = (tiledb_filter_type_t)jarg1; 
  result = tiledb::Filter::to_str(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Filter(void * jarg1) {
  tiledb::Filter *arg1 = (tiledb::Filter *) 0 ;
  std::shared_ptr< tiledb::Filter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Filter > *)jarg1;
  arg1 = (tiledb::Filter *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_FilterList__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::FilterList *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  result = (tiledb::FilterList *)new tiledb::FilterList((std::shared_ptr< tiledb::Context > const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_FilterList__SWIG_1() {
  void * jresult ;
  tiledb::FilterList *result = 0 ;
  
  result = (tiledb::FilterList *)new tiledb::FilterList();
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_FilterList__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::FilterList *arg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  arg1 = (tiledb::FilterList *)(((std::shared_ptr< const tiledb::FilterList > *)jarg1) ? ((std::shared_ptr< const tiledb::FilterList > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::FilterList const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::FilterList *)new tiledb::FilterList((tiledb::FilterList const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_FilterList_ptr(void * jarg1) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_filter_list_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::FilterList const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_filter_list_t >((const std::shared_ptr< tiledb_filter_list_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_FilterList_add_filter(void * jarg1, void * jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  tiledb::Filter *arg2 = 0 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (tiledb::Filter *)(((std::shared_ptr< const tiledb::Filter > *)jarg2) ? ((std::shared_ptr< const tiledb::Filter > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Filter const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::FilterList *) &(arg1)->add_filter((tiledb::Filter const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_FilterList_filter(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  tiledb::Filter result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  result = ((tiledb::FilterList const *)arg1)->filter(arg2);
  jresult = new std::shared_ptr<  tiledb::Filter >(new tiledb::Filter((tiledb::Filter &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_FilterList_max_chunk_size(void * jarg1) {
  unsigned int jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t)((tiledb::FilterList const *)arg1)->max_chunk_size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_FilterList_nfilters(void * jarg1) {
  unsigned int jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t)((tiledb::FilterList const *)arg1)->nfilters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_FilterList_set_max_chunk_size(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  tiledb::FilterList *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  result = (tiledb::FilterList *) &(arg1)->set_max_chunk_size(arg2);
  jresult = new std::shared_ptr<  tiledb::FilterList >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_FilterList(void * jarg1) {
  tiledb::FilterList *arg1 = (tiledb::FilterList *) 0 ;
  std::shared_ptr< tiledb::FilterList > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::FilterList > *)jarg1;
  arg1 = (tiledb::FilterList *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_create_group(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  tiledb::create_group((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_0(int jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Object::Type *arg1 = 0 ;
  std::string *arg2 = 0 ;
  tiledb::Object::Type temp1 ;
  tiledb::Object *result = 0 ;
  
  temp1 = (tiledb::Object::Type)jarg1; 
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb::Object *)new tiledb::Object((tiledb::Object::Type const &)*arg1,(std::string const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_1(int jarg1) {
  void * jresult ;
  tiledb::Object::Type *arg1 = 0 ;
  tiledb::Object::Type temp1 ;
  tiledb::Object *result = 0 ;
  
  temp1 = (tiledb::Object::Type)jarg1; 
  arg1 = &temp1; 
  result = (tiledb::Object *)new tiledb::Object((tiledb::Object::Type const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_2(int jarg1, char * jarg2) {
  void * jresult ;
  tiledb_object_t arg1 ;
  std::string *arg2 = 0 ;
  tiledb::Object *result = 0 ;
  
  arg1 = (tiledb_object_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb::Object *)new tiledb::Object(arg1,(std::string const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_3(int jarg1) {
  void * jresult ;
  tiledb_object_t arg1 ;
  tiledb::Object *result = 0 ;
  
  arg1 = (tiledb_object_t)jarg1; 
  result = (tiledb::Object *)new tiledb::Object(arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_4() {
  void * jresult ;
  tiledb::Object *result = 0 ;
  
  result = (tiledb::Object *)new tiledb::Object();
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Object__SWIG_5(void * jarg1) {
  void * jresult ;
  tiledb::Object *arg1 = 0 ;
  tiledb::Object *result = 0 ;
  
  
  arg1 = (tiledb::Object *)(((std::shared_ptr< const tiledb::Object > *)jarg1) ? ((std::shared_ptr< const tiledb::Object > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Object const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Object *)new tiledb::Object((tiledb::Object const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Object >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Object_to_str(void * jarg1) {
  char * jresult ;
  tiledb::Object *arg1 = (tiledb::Object *) 0 ;
  std::shared_ptr< tiledb::Object const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Object > *)jarg1;
  arg1 = (tiledb::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Object const *)arg1)->to_str();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Object_type(void * jarg1) {
  int jresult ;
  tiledb::Object *arg1 = (tiledb::Object *) 0 ;
  std::shared_ptr< tiledb::Object const > *smartarg1 = 0 ;
  tiledb::Object::Type result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Object > *)jarg1;
  arg1 = (tiledb::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb::Object::Type)((tiledb::Object const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Object_uri(void * jarg1) {
  char * jresult ;
  tiledb::Object *arg1 = (tiledb::Object *) 0 ;
  std::shared_ptr< tiledb::Object const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Object > *)jarg1;
  arg1 = (tiledb::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Object const *)arg1)->uri();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Object_object_(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::Object result;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = tiledb::Object::object((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
  jresult = new std::shared_ptr<  tiledb::Object >(new tiledb::Object((tiledb::Object &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Object_remove(void * jarg1, char * jarg2) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  tiledb::Object::remove((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Object_move(void * jarg1, char * jarg2, char * jarg3) {
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  tiledb::Object::move((std::shared_ptr< tiledb::Context > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Object(void * jarg1) {
  tiledb::Object *arg1 = (tiledb::Object *) 0 ;
  std::shared_ptr< tiledb::Object > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Object > *)jarg1;
  arg1 = (tiledb::Object *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ObjectIter__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ObjectIter *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (tiledb::ObjectIter *)new tiledb::ObjectIter(*arg1,(std::string const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::ObjectIter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_ObjectIter__SWIG_1(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::ObjectIter *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  result = (tiledb::ObjectIter *)new tiledb::ObjectIter(*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::ObjectIter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ObjectIter_set_iter_policy(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  bool arg2 ;
  bool arg3 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_iter_policy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ObjectIter_set_recursive__SWIG_0(void * jarg1, int jarg2) {
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  tiledb_walk_order_t arg2 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_walk_order_t)jarg2; 
  (arg1)->set_recursive(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ObjectIter_set_recursive__SWIG_1(void * jarg1) {
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->set_recursive();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_ObjectIter_set_non_recursive(void * jarg1) {
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->set_non_recursive();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ObjectIter_begin(void * jarg1) {
  void * jresult ;
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  tiledb::ObjectIter::iterator result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->begin();
  jresult = new tiledb::ObjectIter::iterator((const tiledb::ObjectIter::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_ObjectIter_end(void * jarg1) {
  void * jresult ;
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  std::shared_ptr< tiledb::ObjectIter const > *smartarg1 = 0 ;
  tiledb::ObjectIter::iterator result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::ObjectIter const *)arg1)->end();
  jresult = new tiledb::ObjectIter::iterator((const tiledb::ObjectIter::iterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_ObjectIter(void * jarg1) {
  tiledb::ObjectIter *arg1 = (tiledb::ObjectIter *) 0 ;
  std::shared_ptr< tiledb::ObjectIter > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::ObjectIter > *)jarg1;
  arg1 = (tiledb::ObjectIter *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Query__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Array > *arg2 = 0 ;
  tiledb_query_type_t arg3 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Array > tempnull2 ;
  tiledb::Query *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::Array > *)jarg2 : &tempnull2; 
  arg3 = (tiledb_query_type_t)jarg3; 
  result = (tiledb::Query *)new tiledb::Query((std::shared_ptr< tiledb::Context > const &)*arg1,(std::shared_ptr< tiledb::Array > const &)*arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Query__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Array > *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  std::shared_ptr< tiledb::Array > tempnull2 ;
  tiledb::Query *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  arg2 = jarg2 ? (std::shared_ptr< tiledb::Array > *)jarg2 : &tempnull2; 
  result = (tiledb::Query *)new tiledb::Query((std::shared_ptr< tiledb::Context > const &)*arg1,(std::shared_ptr< tiledb::Array > const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Query__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  arg1 = (tiledb::Query *)(((std::shared_ptr< const tiledb::Query > *)jarg1) ? ((std::shared_ptr< const tiledb::Query > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Query const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::Query *)new tiledb::Query((tiledb::Query const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_ptr(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_query_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Query const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_query_t >((const std::shared_ptr< tiledb_query_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_context(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Context > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< tiledb::Context > *) &(arg1)->context();
  jresult = *result ? new std::shared_ptr< tiledb::Context >(*result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Query_query_type(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb_query_type_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_query_type_t)((tiledb::Query const *)arg1)->query_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_set_layout(void * jarg1, int jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  tiledb_layout_t arg2 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (tiledb_layout_t)jarg2; 
  result = (tiledb::Query *) &(arg1)->set_layout(arg2);
  jresult = new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Query_query_layout(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb_layout_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb_layout_t)((tiledb::Query const *)arg1)->query_layout();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_array(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Array > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< tiledb::Array > *) &(arg1)->array();
  jresult = *result ? new std::shared_ptr< tiledb::Array >(*result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Query_query_status(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  tiledb::Query::Status result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb::Query::Status)((tiledb::Query const *)arg1)->query_status();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Query_has_results(void * jarg1) {
  unsigned int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((tiledb::Query const *)arg1)->has_results();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Query_submit(void * jarg1) {
  int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query::Status result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (tiledb::Query::Status)(arg1)->submit();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_submit_async(void * jarg1) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->submit_async();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_finalize(void * jarg1) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->finalize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_result_buffer_elements(void * jarg1) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::unordered_map< std::string,std::pair< uint64_t,uint64_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::Query const *)arg1)->result_buffer_elements();
  jresult = new std::unordered_map< std::string,std::pair< uint64_t,uint64_t > >((const std::unordered_map< std::string,std::pair< uint64_t,uint64_t > > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_add_range(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (tiledb::Query *) &(arg1)->add_range(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Query_range_num(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (uint64_t)((tiledb::Query const *)arg1)->range_num(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_range(void * jarg1, unsigned int jarg2, unsigned long long jarg3) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  std::array< std::string,2 > result;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  result = (arg1)->range(arg2,arg3);
  jresult = new std::array< std::string,2 >((const std::array< std::string,2 > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_Query_est_result_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint64_t)((tiledb::Query const *)arg1)->est_result_size((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_est_result_size_var(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  SwigValueWrapper< std::pair< unsigned long long,unsigned long long > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::Query const *)arg1)->est_result_size_var((std::string const &)*arg2);
  jresult = new std::pair< uint64_t,uint64_t >((const std::pair< uint64_t,uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_Query_fragment_num(void * jarg1) {
  unsigned int jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t)((tiledb::Query const *)arg1)->fragment_num();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Query_fragment_uri(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  result = ((tiledb::Query const *)arg1)->fragment_uri(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_fragment_timestamp_range(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< tiledb::Query const > *smartarg1 = 0 ;
  SwigValueWrapper< std::pair< unsigned long long,unsigned long long > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  result = ((tiledb::Query const *)arg1)->fragment_timestamp_range(arg2);
  jresult = new std::pair< uint64_t,uint64_t >((const std::pair< uint64_t,uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_set_int32_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->set_int32_vector_buffer((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_set_int64_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > & type is null", 0);
    return ;
  } 
  (arg1)->set_int64_vector_buffer((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_set_uint32_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint32_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< uint32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > & type is null", 0);
    return ;
  } 
  (arg1)->set_uint32_vector_buffer((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_set_uint64_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > & type is null", 0);
    return ;
  } 
  (arg1)->set_uint64_vector_buffer((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Query_set_double_vector_buffer(void * jarg1, char * jarg2, void * jarg3) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  (arg1)->set_double_vector_buffer((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_Query_set_buffer(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  tiledb::Query *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > & type is null", 0);
    return 0;
  } 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (tiledb::Query *) &(arg1)->set_buffer((std::string const &)*arg2,*arg3,*arg4);
  jresult = new std::shared_ptr<  tiledb::Query >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tiledb_Query_to_status(int jarg1) {
  int jresult ;
  tiledb_query_status_t *arg1 = 0 ;
  tiledb_query_status_t temp1 ;
  tiledb::Query::Status result;
  
  temp1 = (tiledb_query_status_t)jarg1; 
  arg1 = &temp1; 
  result = (tiledb::Query::Status)tiledb::Query::to_status((enum tiledb_query_status_t const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_tiledb_Query_to_str(int jarg1) {
  char * jresult ;
  tiledb_query_type_t arg1 ;
  std::string result;
  
  arg1 = (tiledb_query_type_t)jarg1; 
  result = tiledb::Query::to_str(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Query(void * jarg1) {
  tiledb::Query *arg1 = (tiledb::Query *) 0 ;
  std::shared_ptr< tiledb::Query > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Query > *)jarg1;
  arg1 = (tiledb::Query *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_enable() {
  tiledb::Stats::enable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_disable() {
  tiledb::Stats::disable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_reset() {
  tiledb::Stats::reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_dump__SWIG_0() {
  tiledb::Stats::dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_dump__SWIG_1(void * jarg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = (std::string *)jarg1; 
  tiledb::Stats::dump(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_raw_dump__SWIG_0() {
  tiledb::Stats::raw_dump();
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_Stats_raw_dump__SWIG_1(void * jarg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = (std::string *)jarg1; 
  tiledb::Stats::raw_dump(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_Stats() {
  void * jresult ;
  tiledb::Stats *result = 0 ;
  
  result = (tiledb::Stats *)new tiledb::Stats();
  
  jresult = result ? new std::shared_ptr<  tiledb::Stats >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_Stats(void * jarg1) {
  tiledb::Stats *arg1 = (tiledb::Stats *) 0 ;
  std::shared_ptr< tiledb::Stats > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::Stats > *)jarg1;
  arg1 = (tiledb::Stats *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_check_config_error(void * jarg1) {
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  
  arg1 = (tiledb_error_t *)jarg1; 
  tiledb::impl::check_config_error(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_version() {
  void * jresult ;
  std::tuple< int,int,int > result;
  
  result = tiledb::version();
  jresult = new std::tuple< int,int,int >((const std::tuple< int,int,int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_VFS__SWIG_0(void * jarg1) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::VFS *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  result = (tiledb::VFS *)new tiledb::VFS((std::shared_ptr< tiledb::Context > const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_VFS__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::shared_ptr< tiledb::Context > *arg1 = 0 ;
  tiledb::Config *arg2 = 0 ;
  std::shared_ptr< tiledb::Context > tempnull1 ;
  tiledb::VFS *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< tiledb::Context > *)jarg1 : &tempnull1; 
  
  arg2 = (tiledb::Config *)(((std::shared_ptr< const tiledb::Config > *)jarg2) ? ((std::shared_ptr< const tiledb::Config > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::Config const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::VFS *)new tiledb::VFS((std::shared_ptr< tiledb::Context > const &)*arg1,(tiledb::Config const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_new_VFS__SWIG_2(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = 0 ;
  tiledb::VFS *result = 0 ;
  
  
  arg1 = (tiledb::VFS *)(((std::shared_ptr< const tiledb::VFS > *)jarg1) ? ((std::shared_ptr< const tiledb::VFS > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tiledb::VFS const & reference is null", 0);
    return 0;
  } 
  result = (tiledb::VFS *)new tiledb::VFS((tiledb::VFS const &)*arg1);
  
  jresult = result ? new std::shared_ptr<  tiledb::VFS >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_create_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->create_bucket((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_remove_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->remove_bucket((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_VFS_is_bucket(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::VFS const *)arg1)->is_bucket((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_empty_bucket(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->empty_bucket((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_VFS_is_empty_bucket(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::VFS const *)arg1)->is_empty_bucket((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_create_dir(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->create_dir((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_VFS_is_dir(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::VFS const *)arg1)->is_dir((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_remove_dir(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->remove_dir((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tiledb_VFS_is_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((tiledb::VFS const *)arg1)->is_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_remove_file(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->remove_file((std::string const &)*arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_VFS_dir_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint64_t)((tiledb::VFS const *)arg1)->dir_size((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_VFS_ls(void * jarg1, char * jarg2) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((tiledb::VFS const *)arg1)->ls((std::string const &)*arg2);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_tiledb_VFS_file_size(void * jarg1, char * jarg2) {
  unsigned long long jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint64_t)((tiledb::VFS const *)arg1)->file_size((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_move_file(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  ((tiledb::VFS const *)arg1)->move_file((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_move_dir(void * jarg1, char * jarg2, char * jarg3) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  ((tiledb::VFS const *)arg1)->move_dir((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_VFS_touch(void * jarg1, char * jarg2) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((tiledb::VFS const *)arg1)->touch((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_VFS_context(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  std::shared_ptr< tiledb::Context > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< tiledb::Context > *) &((tiledb::VFS const *)arg1)->context();
  jresult = *result ? new std::shared_ptr< tiledb::Context >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_VFS_ptr(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< tiledb_vfs_t > > result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::VFS const *)arg1)->ptr();
  jresult = new std::shared_ptr< tiledb_vfs_t >((const std::shared_ptr< tiledb_vfs_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tiledb_VFS_config(void * jarg1) {
  void * jresult ;
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS const > *smartarg1 = 0 ;
  tiledb::Config result;
  
  
  smartarg1 = (std::shared_ptr< const tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((tiledb::VFS const *)arg1)->config();
  jresult = new std::shared_ptr<  tiledb::Config >(new tiledb::Config((tiledb::Config &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tiledb_delete_VFS(void * jarg1) {
  tiledb::VFS *arg1 = (tiledb::VFS *) 0 ;
  std::shared_ptr< tiledb::VFS > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  tiledb::VFS > *)jarg1;
  arg1 = (tiledb::VFS *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_tiledb_TypeError_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::TypeError > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_tiledb_SchemaMismatch_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::SchemaMismatch > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< tiledb::TileDBError > * SWIGSTDCALL CSharp_tiledb_AttributeError_SWIGSmartPtrUpcast(std::shared_ptr< tiledb::AttributeError > *jarg1) {
    return jarg1 ? new std::shared_ptr< tiledb::TileDBError >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

