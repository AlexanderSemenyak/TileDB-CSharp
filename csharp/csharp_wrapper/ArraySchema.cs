//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TileDB {

public class ArraySchema : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ArraySchema(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ArraySchema obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArraySchema() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbcsPINVOKE.delete_ArraySchema(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ArraySchema(Context ctx, tiledb_array_type_t type) : this(tiledbcsPINVOKE.new_ArraySchema__SWIG_0(Context.getCPtr(ctx), (int)type), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArraySchema(Context ctx, string uri) : this(tiledbcsPINVOKE.new_ArraySchema__SWIG_1(Context.getCPtr(ctx), uri), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArraySchema(Context ctx, string uri, tiledb_encryption_type_t encryption_type, string encryption_key) : this(tiledbcsPINVOKE.new_ArraySchema__SWIG_2(Context.getCPtr(ctx), uri, (int)encryption_type, encryption_key), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ArraySchema() : this(tiledbcsPINVOKE.new_ArraySchema__SWIG_3(), true) {
  }

  public ArraySchema(ArraySchema arg0) : this(tiledbcsPINVOKE.new_ArraySchema__SWIG_4(ArraySchema.getCPtr(arg0)), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dump(SWIGTYPE_p_FILE out_) {
    tiledbcsPINVOKE.ArraySchema_dump__SWIG_0(swigCPtr, SWIGTYPE_p_FILE.getCPtr(out_));
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dump() {
    tiledbcsPINVOKE.ArraySchema_dump__SWIG_1(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public tiledb_array_type_t array_type() {
    tiledb_array_type_t ret = (tiledb_array_type_t)tiledbcsPINVOKE.ArraySchema_array_type(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong capacity() {
    ulong ret = tiledbcsPINVOKE.ArraySchema_capacity(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_capacity(ulong capacity) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_capacity(swigCPtr, capacity), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool allows_dups() {
    bool ret = tiledbcsPINVOKE.ArraySchema_allows_dups(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_allows_dups(bool allows_dups) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_allows_dups(swigCPtr, allows_dups), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public tiledb_layout_t tile_order() {
    tiledb_layout_t ret = (tiledb_layout_t)tiledbcsPINVOKE.ArraySchema_tile_order(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_tile_order(tiledb_layout_t layout) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_tile_order(swigCPtr, (int)layout), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_order(SWIGTYPE_p_std__arrayT_tiledb_layout_t_2_t p) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_order(swigCPtr, SWIGTYPE_p_std__arrayT_tiledb_layout_t_2_t.getCPtr(p)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public tiledb_layout_t cell_order() {
    tiledb_layout_t ret = (tiledb_layout_t)tiledbcsPINVOKE.ArraySchema_cell_order(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_cell_order(tiledb_layout_t layout) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_cell_order(swigCPtr, (int)layout), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterList coords_filter_list() {
    FilterList ret = new FilterList(tiledbcsPINVOKE.ArraySchema_coords_filter_list(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_coords_filter_list(FilterList filter_list) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_coords_filter_list(swigCPtr, FilterList.getCPtr(filter_list)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterList offsets_filter_list() {
    FilterList ret = new FilterList(tiledbcsPINVOKE.ArraySchema_offsets_filter_list(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_offsets_filter_list(FilterList filter_list) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_offsets_filter_list(swigCPtr, FilterList.getCPtr(filter_list)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Domain domain() {
    Domain ret = new Domain(tiledbcsPINVOKE.ArraySchema_domain(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema set_domain(Domain domain) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_set_domain(swigCPtr, Domain.getCPtr(domain)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ArraySchema add_attribute(Attribute attr) {
    ArraySchema ret = new ArraySchema(tiledbcsPINVOKE.ArraySchema_add_attribute__SWIG_0(swigCPtr, Attribute.getCPtr(attr)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_tiledb_array_schema_t_t ptr() {
    SWIGTYPE_p_std__shared_ptrT_tiledb_array_schema_t_t ret = new SWIGTYPE_p_std__shared_ptrT_tiledb_array_schema_t_t(tiledbcsPINVOKE.ArraySchema_ptr(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void check() {
    tiledbcsPINVOKE.ArraySchema_check(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__unordered_mapT_std__string_tiledb__Attribute_t attributes() {
    SWIGTYPE_p_std__unordered_mapT_std__string_tiledb__Attribute_t ret = new SWIGTYPE_p_std__unordered_mapT_std__string_tiledb__Attribute_t(tiledbcsPINVOKE.ArraySchema_attributes(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Attribute attribute(string name) {
    Attribute ret = new Attribute(tiledbcsPINVOKE.ArraySchema_attribute__SWIG_0(swigCPtr, name), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint attribute_num() {
    uint ret = tiledbcsPINVOKE.ArraySchema_attribute_num(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Attribute attribute(uint i) {
    Attribute ret = new Attribute(tiledbcsPINVOKE.ArraySchema_attribute__SWIG_1(swigCPtr, i), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_attribute(string name) {
    bool ret = tiledbcsPINVOKE.ArraySchema_has_attribute(swigCPtr, name);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string to_info_str() {
    string ret = tiledbcsPINVOKE.ArraySchema_to_info_str(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_str(tiledb_array_type_t type) {
    string ret = tiledbcsPINVOKE.ArraySchema_to_str__SWIG_0((int)type);
    return ret;
  }

  public static string to_str(tiledb_layout_t layout) {
    string ret = tiledbcsPINVOKE.ArraySchema_to_str__SWIG_1((int)layout);
    return ret;
  }

  public VectorString attribute_names() {
    VectorString ret = new VectorString(tiledbcsPINVOKE.ArraySchema_attribute_names(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorString dimension_names() {
    VectorString ret = new VectorString(tiledbcsPINVOKE.ArraySchema_dimension_names(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_dimension(string name) {
    bool ret = tiledbcsPINVOKE.ArraySchema_has_dimension(swigCPtr, name);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dimension dimension(uint idx) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.ArraySchema_dimension__SWIG_0(swigCPtr, idx), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dimension dimension(string name) {
    Dimension ret = new Dimension(tiledbcsPINVOKE.ArraySchema_dimension__SWIG_1(swigCPtr, name), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add_int_dimension(string name, int lower, int upper, int extent) {
    tiledbcsPINVOKE.ArraySchema_add_int_dimension(swigCPtr, name, lower, upper, extent);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_attribute(string name, tiledb_datatype_t type) {
    tiledbcsPINVOKE.ArraySchema_add_attribute__SWIG_1(swigCPtr, name, (int)type);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string to_json_str() {
    string ret = tiledbcsPINVOKE.ArraySchema_to_json_str(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
