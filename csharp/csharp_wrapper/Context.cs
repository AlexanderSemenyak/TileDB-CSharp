//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TileDB {

public class Context : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Context(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Context obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Context() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbcsPINVOKE.delete_Context(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Context() : this(tiledbcsPINVOKE.new_Context__SWIG_0(), true) {
  }

  public Context(Config config) : this(tiledbcsPINVOKE.new_Context__SWIG_1(Config.getCPtr(config)), true) {
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Context(SWIGTYPE_p_tiledb_ctx_t ctx) : this(tiledbcsPINVOKE.new_Context__SWIG_2(SWIGTYPE_p_tiledb_ctx_t.getCPtr(ctx)), true) {
  }

  public void handle_error(int rc) {
    tiledbcsPINVOKE.Context_handle_error(swigCPtr, rc);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Context set_error_handler(SWIGTYPE_p_std__functionT_void_fstd__string_const_RF_t fn) {
    Context ret = new Context(tiledbcsPINVOKE.Context_set_error_handler(swigCPtr, SWIGTYPE_p_std__functionT_void_fstd__string_const_RF_t.getCPtr(fn)), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Config config() {
    Config ret = new Config(tiledbcsPINVOKE.Context_config(swigCPtr), true);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_supported_fs(tiledb_filesystem_t fs) {
    bool ret = tiledbcsPINVOKE.Context_is_supported_fs(swigCPtr, (int)fs);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cancel_tasks() {
    tiledbcsPINVOKE.Context_cancel_tasks(swigCPtr);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_tag(string key, string value) {
    tiledbcsPINVOKE.Context_set_tag(swigCPtr, key, value);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void default_error_handler(string msg) {
    tiledbcsPINVOKE.Context_default_error_handler(msg);
    if (tiledbcsPINVOKE.SWIGPendingException.Pending) throw tiledbcsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
