//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace tiledb {

public class ObjectIter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ObjectIter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectIter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectIter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbPINVOKE.delete_ObjectIter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ObjectIter(Context ctx, string root) : this(tiledbPINVOKE.new_ObjectIter__SWIG_0(Context.getCPtr(ctx), root), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public ObjectIter(Context ctx) : this(tiledbPINVOKE.new_ObjectIter__SWIG_1(Context.getCPtr(ctx)), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_iter_policy(bool group, bool array) {
    tiledbPINVOKE.ObjectIter_set_iter_policy(swigCPtr, group, array);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_recursive(tiledb_walk_order_t walk_order) {
    tiledbPINVOKE.ObjectIter_set_recursive__SWIG_0(swigCPtr, (int)walk_order);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_recursive() {
    tiledbPINVOKE.ObjectIter_set_recursive__SWIG_1(swigCPtr);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_non_recursive() {
    tiledbPINVOKE.ObjectIter_set_non_recursive(swigCPtr);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_tiledb__ObjectIter__iterator begin() {
    SWIGTYPE_p_tiledb__ObjectIter__iterator ret = new SWIGTYPE_p_tiledb__ObjectIter__iterator(tiledbPINVOKE.ObjectIter_begin(swigCPtr), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_tiledb__ObjectIter__iterator end() {
    SWIGTYPE_p_tiledb__ObjectIter__iterator ret = new SWIGTYPE_p_tiledb__ObjectIter__iterator(tiledbPINVOKE.ObjectIter_end(swigCPtr), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
