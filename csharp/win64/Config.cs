//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace tiledb {

public class Config : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Config(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Config obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Config() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbPINVOKE.delete_Config(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Config() : this(tiledbPINVOKE.new_Config__SWIG_0(), true) {
  }

  public Config(string filename) : this(tiledbPINVOKE.new_Config__SWIG_1(filename), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save_to_file(string filename) {
    tiledbPINVOKE.Config_save_to_file(swigCPtr, filename);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_tiledb_config_t_t ptr() {
    SWIGTYPE_p_std__shared_ptrT_tiledb_config_t_t ret = new SWIGTYPE_p_std__shared_ptrT_tiledb_config_t_t(tiledbPINVOKE.Config_ptr(swigCPtr), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Config set(string param, string value) {
    Config ret = new Config(tiledbPINVOKE.Config_set(swigCPtr, param, value), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get(string param) {
    string ret = tiledbPINVOKE.Config_get(swigCPtr, param);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Config unset(string param) {
    Config ret = new Config(tiledbPINVOKE.Config_unset(swigCPtr, param), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
