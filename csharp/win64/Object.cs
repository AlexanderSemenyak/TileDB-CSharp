//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace tiledb {

public class Object : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Object(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Object obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Object() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          tiledbPINVOKE.delete_Object(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Object(Object.Type type, string uri) : this(tiledbPINVOKE.new_Object__SWIG_0((int)type, uri), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(Object.Type type) : this(tiledbPINVOKE.new_Object__SWIG_1((int)type), true) {
  }

  public Object(tiledb_object_t type, string uri) : this(tiledbPINVOKE.new_Object__SWIG_2((int)type, uri), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(tiledb_object_t type) : this(tiledbPINVOKE.new_Object__SWIG_3((int)type), true) {
  }

  public Object() : this(tiledbPINVOKE.new_Object__SWIG_4(), true) {
  }

  public Object(Object arg0) : this(tiledbPINVOKE.new_Object__SWIG_5(Object.getCPtr(arg0)), true) {
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public string to_str() {
    string ret = tiledbPINVOKE.Object_to_str(swigCPtr);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Object.Type type() {
    Object.Type ret = (Object.Type)tiledbPINVOKE.Object_type(swigCPtr);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string uri() {
    string ret = tiledbPINVOKE.Object_uri(swigCPtr);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Object object_(Context ctx, string uri) {
    Object ret = new Object(tiledbPINVOKE.Object_object_(Context.getCPtr(ctx), uri), true);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void remove(Context ctx, string uri) {
    tiledbPINVOKE.Object_remove(Context.getCPtr(ctx), uri);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void move(Context ctx, string old_uri, string new_uri) {
    tiledbPINVOKE.Object_move(Context.getCPtr(ctx), old_uri, new_uri);
    if (tiledbPINVOKE.SWIGPendingException.Pending) throw tiledbPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Type {
    Array,
    Group,
    Invalid
  }

}

}
